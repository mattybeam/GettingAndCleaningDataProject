bids_ma2 <- subset(bids_ma,!(Professor %in% c("Black","Fiebig") ))
mean(bids_ma2$Rd.1.Points)
summary(bids_ma$Rd.1.Points[bids_ma$Professor=="Lutz"])
# 5 data points for Lutz
summary(bids_ma2$Rd.1.Points)
# Generate 100 random numbers from distribution with mean and standard deviation
plot(density(bids_ma2$Rd.1.Points)) # Density estimate of data
plot(ecdf(bids_ma2$Rd.1.Points)) # Empirical cdf of data
qqnorm(bids_ma2$Rd.1.Points)
sd(bids_ma2$Rd.1.Points)
rand_ma <- rnorm(n = 100,mean = mean(bids_ma2$Rd.1.Points),sd = sd(bids_ma2$Rd.1.Points))
hist(rand_ma)
good_bid_ma <- rep(0,100)
good_bid_ma <- ifelse(451>=rand_ma,1,0)
sum(good_bid_ma)
pnorm(q = 451,mean = mean(bids_ma2$Rd.1.Points),sd = sd(bids_ma2$Rd.1.Points))
pnorm(q = 451,mean = mean(bids_ma2$Rd.1.Points[bids_ma2$Professor=="Lutz"]),
sd = sd(bids_ma2$Rd.1.Points[bids_ma2$Professor=="Lutz"]))
bids_ma
bids_contracts
bids_contracts[bids_contracts$Professor=="Mullaney"]
bids_contracts[bids_contracts$Professor=="Mullaney",]
bids_ma2
bids_ma2 <- subset(bids_ma2,!(Professor=="Lutz" & Term="Spring"))
bids_ma2 <- subset(bids_ma2,!(Professor=="Lutz" && Term="Spring"))
bids_ma2 <- subset(bids_ma2,!(Professor=="Lutz" && Term=="Spring"))
bids_ma2
bids_ma2 <- subset(bids_ma2,!(Professor=="Lutz" & Term=="Spring"))
bids_ma2
summary(bids_ma2$Rd.1.Points)
plot(density(bids_ma2$Rd.1.Points)) # Density estimate of data
plot(ecdf(bids_ma2$Rd.1.Points)) # Empirical cdf of data
qqnorm(bids_ma2$Rd.1.Points)
sd(bids_ma2$Rd.1.Points)
rand_ma <- rnorm(n = 100,mean = mean(bids_ma2$Rd.1.Points),sd = sd(bids_ma2$Rd.1.Points))
hist(rand_ma)
good_bid_ma <- rep(0,100)
good_bid_ma <- ifelse(451>=rand_ma,1,0)
sum(good_bid_ma)
pnorm(q = 451,mean = mean(bids_ma2$Rd.1.Points),sd = sd(bids_ma2$Rd.1.Points))
pnorm(q = 451,mean = mean(bids_ma2$Rd.1.Points[bids_ma2$Professor=="Lutz"]),
sd = sd(bids_ma2$Rd.1.Points[bids_ma2$Professor=="Lutz"]))
table(bids$Class)
bids_tax <- subset(bids,Class=="Basic Federal Income Taxation")
bids_tax
bids_tax[bids_tax$Professor=="Crane",]
mean(bids_tax$Rd.1.Points)
table(bids_tax$Professor)
mean(bids_tax$Rd.1.Points[bids_tax$Professor=="Crane"])
# Set reference level to Crane
bids_tax$Professor <- relevel(x = bids_tax$Professor,ref = "Crane")
lm_tax1 <- lm(Rd.1.Points~Professor,data=bids_tax)
summary(lm_tax1)
anova(lm_tax1)
lm_tax2 <- lm(Rd.1.Points~Term,data=bids_tax)
summary(lm_tax2)
anova(lm_tax2)
lm_tax3 <- lm(Rd.1.Points~Professor + Term + Professor*Term,data=bids_tax)
summary(lm_tax3)
anova(lm_tax3)
bids_tax2 <- subset(bids_tax,!(Professor %in% c("Brennan") ))
mean(bids_tax2$Rd.1.Points)
summary(bids_tax$Rd.1.Points[bids_tax$Professor=="Crane"])
summary(bids_tax2$Rd.1.Points)
bids_tax2[bids_tax2$Rd.1.Points==100]
bids_tax2[bids_tax2$Rd.1.Points==100,]
bids_tax2
plot(density(bids_tax2$Rd.1.Points)) # Density estimate of data
plot(ecdf(bids_tax2$Rd.1.Points)) # Empirical cdf of data
qqnorm(bids_tax2$Rd.1.Points)
sd(bids_tax2$Rd.1.Points)
rand_tax <- rnorm(n = 100,mean = mean(bids_tax2$Rd.1.Points),sd = sd(bids_tax2$Rd.1.Points))
hist(rand_tax)
good_bid_tax <- rep(0,100)
good_bid_tax <- ifelse(11>=rand_tax,1,0)
sum(good_bid_tax)
pnorm(q = 11,mean = mean(bids_tax2$Rd.1.Points),sd = sd(bids_tax2$Rd.1.Points))
pnorm(q = 11,mean = mean(bids_tax2$Rd.1.Points[bids_tax2$Professor=="Crane"]),
sd = sd(bids_tax2$Rd.1.Points[bids_tax2$Professor=="Crane"]))
table(bids$Class)
bids_comm <- subset(bids,Class=="Commercial Secured Transaction")
mean(bids_comm$Rd.1.Points)
table(bids_comm$Professor)
mean(bids_comm$Rd.1.Points[bids_comm$Professor=="Francis"])
# Set reference level to Francis
bids_comm$Professor <- relevel(x = bids_comm$Professor,ref = "Francis")
lm_comm1 <- lm(Rd.1.Points~Professor,data=bids_comm)
lm_comm2 <- lm(Rd.1.Points~Term,data=bids_comm)
summary(lm_comm2)
anova(lm_comm2)
# No significant difference in term
bids_comm
plot(density(bids_comm$Rd.1.Points)) # Density estimate of data
plot(ecdf(bids_comm$Rd.1.Points)) # Empirical cdf of data
qqnorm(bids_comm$Rd.1.Points)
sd(bids_comm$Rd.1.Points)
rand_comm <- rnorm(n = 100,mean = mean(bids_comm2$Rd.1.Points),sd = sd(bids_comm2$Rd.1.Points))
rand_comm <- rnorm(n = 100,mean = mean(bids_comm$Rd.1.Points),sd = sd(bids_comm$Rd.1.Points))
hist(rand_comm)
good_bid_comm <- rep(0,100)
good_bid_comm <- ifelse(1051>=rand_comm,1,0)
sum(good_bid_comm)
good_bid_comm <- ifelse(10>=rand_comm,1,0)
sum(good_bid_comm)
pnorm(q = 10,mean = mean(bids_comm2$Rd.1.Points),sd = sd(bids_comm2$Rd.1.Points))
pnorm(q = 10,mean = mean(bids_comm$Rd.1.Points),sd = sd(bids_comm$Rd.1.Points))
pnorm(q = 10,mean = mean(bids_comm2$Rd.1.Points[bids_comm2$Professor=="Francis"]),
sd = sd(bids_comm2$Rd.1.Points[bids_comm2$Professor=="Francis"]))
pnorm(q = 10,mean = mean(bids_comm$Rd.1.Points[bids_comm$Professor=="Francis"]),
sd = sd(bids_comm$Rd.1.Points[bids_comm$Professor=="Francis"]))
bids_comm
table(bids$Class)
bids_neg <- subset(bids,Class %in% c("Bankruptcy Trial Practice","Bankruptcy Taxation"))
bids_bank <- subset(bids,Class %in% c("Bankruptcy Trial Practice","Bankruptcy Taxation"))
bids_bank <- subset(bids,Class %in% c("Bankruptcy Trial Practice","Bankruptcy Taxation"))
mean(bids_bank$Rd.1.Points)
table(bids_bank$Professor)
lm_bank1 <- lm(Rd.1.Points~Professor,data=bids_bank)
summary(lm_bank1)
anova(lm_bank1)
lm_bank2 <- lm(Rd.1.Points~Term,data=bids_bank)
plot(density(bids_bank$Rd.1.Points)) # Density estimate of data
plot(ecdf(bids_bank$Rd.1.Points)) # Empirical cdf of data
bids_bank
qqnorm(bids_bank$Rd.1.Points)
sd(bids_bank$Rd.1.Points)
rand_bank <- rnorm(n = 100,mean = mean(bids_bank$Rd.1.Points),sd = sd(bids_bank$Rd.1.Points))
hist(rand_bank)
good_bid_bank <- rep(0,100)
good_bid_bank <- ifelse(9>=rand_bank,1,0)
sum(good_bid_bank)
pnorm(q = 9,mean = mean(bids_bank9$Rd.1.Points),sd = sd(bids_bank$Rd.1.Points))
pnorm(q = 9,mean = mean(bids_bank$Rd.1.Points),sd = sd(bids_bank$Rd.1.Points))
bids_neg <- subset(bids,Class=="Negotiation")
mean(bids_neg$Rd.1.Points)
table(bids_neg$Professor)
mean(bids_neg$Rd.1.Points[bids_neg$Professor=="Gandert"])
# Set reference level to Gandert
bids_neg$Professor <- relevel(x = bids_neg$Professor,ref = "Gandert")
lm_neg1 <- lm(Rd.1.Points~Professor,data=bids_neg)
summary(lm_neg1)
anova(lm_neg1)
mean(bids_neg$Rd.1.Points[bids_neg$Professor=="Agnew"])
bids_neg$Rd.1.Points[bids_neg$Professor=="Agnew"]
bids_neg[bids_neg$Professor=="Agnew",]
x <- list(a=1:5,b=randn(10))
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
?rnorm
x <- 1:4
lapply(x,runif)
x <- list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
sapply(x,mean)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
apply(x,1,quantile,probs=c(0.25,0.75))
a <- array(rnorm(2*2*10),c(2,2,10))
a
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
f
?gl
tapply(x,f,mean)
tapply(x,f,mean,simplify=FALSE)
tapply(x,f,range)
split(x,f)
library(datasets)
data(airquality)
head(airquality)
s <- split(airquality,airquality$Month)
s
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x), colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
f2
str(split(x,list(f1,f2)))
f1
f2
str(split(x,list(f1,f2),drop=TRUE))
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
noise <- function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
data(iris)
?iris
head(iris)
colMeans(iris[,"Sepal.Length"])
colMeans(iris)
colMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
data(mtcars)
head(mtcars)
?mtcars
split(mtcars,"cyl")
split(mtcars,mtcars$cyl)
sapply(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(hp,cyl,mean))
meanHP <- with(mtcars,tapply(hp,cyl,mean))
meanHP[8]
meanHP[3]
meanHP[3]-meanHP[4]
meanHP[3]-meanHP[1]
debug(ls)
ls()
exit
debug(ls)
ls
esc
quit
t
tuit
quit
quit
stop
library(datasets)
data(iris)
apply(iris[,1:4],2,mean)
s <- split(iris,iris$Sepal.Lenght)
s <- split(iris,iris$Sepal.Length)
s
s <- split(iris,iris$Species)
s
lapply(s,mean)
lapply(s,function(x) colMeans(x[,"virginica"]))
lapply(s,function(x) mean(x))
lapply(s,function(x) mean(x,na.rm=T))
lapply(s,function(x) colMeans[,"Sepal.Length"])
lapply(s,function(x) colMeans[,c("Sepal.Length")])
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
apply(iris[,1:4],2,mean)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
meanHP <- with(mtcars, tapply(mpg, cyl, mean))
meanHP[3]-meanHP[1]
tapply(mtcars$mpg, mtcars$cyl, mean)
meanHP <- with(mtcars, tapply(hp, cyl, mean))
meanHP
meanHP[3]-meanHP[1]
str(lm)
x <- rnorm(100,2,4)
str(x)
x <- rnorm(10)
x <- rnorm(10,20,2)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,lambda = 1)
ppois(2,2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
str(set.seed)
?set.seed
sample(letters,5)
sample(1:10)
system.time(mean(x))
Rprof()
lm(y~x)
Rprof(lm(y~x))
str(Rprof)
Rprof()
lm(y~x)
summaryRprof()
Rprof()
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
pt(0.025,31)
pt(0.025,32)
1-pt(0.025,32)
qt(0.025,32)
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv('path2csv',stringsAsFactors=FALSE)
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US" | country == "IN")
filter(cran,size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts <- filter(pack_sum,count>679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
?chain
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("tidyr")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes-34,seconds-55)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment,hours=22,minutes=29)
this_moment
nyc(now("America/New York"))
nyc <- now("America/New York")
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart + hours(15)+minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long(last_time,arrive)
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
setwd("~/datasciencecoursera/GettingAndCleaningDataProject")
# First, read in the training and test sets
train <- read.table("~/datasciencecoursera/UCI HAR Dataset/train/X_train.txt",colClasses="numeric",row.names=NULL)
train <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/train/X_train.txt",
colClasses="numeric",row.names=NULL)
train_ID <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/train/subject_train.txt",
colClasses="numeric") # training subjects
test <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/test/X_test.txt",
colClasses="numeric",row.names=NULL)
test_ID <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/test/subject_test.txt",
colClasses="numeric") # test subjects
ID <- rbind(train_ID,test_ID) # Combine IDs
### 1. Merge the training and test sets to create one data set
moveData <- rbind(train,test)
moveData <- cbind(ID,moveData)
names(moveData)[1] <- "Subject" # Rename first column of data frame
### 2. Extract only the measurements on the mean and standard deviation for each measurement
features <- read.table("~/datasciencecoursera/UCI HAR Dataset/features.txt",row.names=NULL)
features <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/features.txt",row.names=NULL)
mean_sd <- rep(NA,nrow(features)) # Initialize logical vector
mean_sd <- grepl("mean",features$V2) # Find variables with mean
mean_sd2 <- grepl("std",features$V2) # Fing variables with standard deviation
mean_sd <- mean_sd + mean_sd2 # Add two vectors together to get those with mean and those with standard deviation
mean_sd_vars <- which(mean_sd == 1) # Find index of variables with mean or standard deviation
# Select only measurements on mean and standard deviation for each measurement and subject column
moveData <- subset(moveData,select=c(mean_sd_vars,ncol(moveData)))
### 3. Use descriptive activity names to name the activities in the data set.
# First get activity codes 1-6
train_activity <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/train/y_train.txt")
test_activity <- read.table("~/datasciencecoursera/GettingAndCleaningDataProject/UCI HAR Dataset/test/y_test.txt")
# Rbind codes from training and test data, with training data on top and cbind to moveData
activity <- rbind(train_activity,test_activity)
moveData <- cbind(activity,moveData)
names(moveData)[1] <- "Activity" # Rename variable as Activity
moveData <- moveData[,c(2,1,3:ncol(moveData))] # Reorder so subject is first column, activity second
# Turn numbers into descriptive activities
moveData$Activity[moveData$Activity==1] <- "WALKING"
moveData$Activity[moveData$Activity==2] <- "WALKING_UPSTAIRS"
moveData$Activity[moveData$Activity==3] <- "WALKING_DOWNSTAIRS"
moveData$Activity[moveData$Activity==4] <- "SITTING"
moveData$Activity[moveData$Activity==5] <- "STANDING"
moveData$Activity[moveData$Activity==6] <- "LAYING"
### 4. Appropriately label the data set with descriptive variable names
names(moveData) <- c("Subject","Activity",as.character(features[mean_sd_vars,2])) # Add names of variables
# Clean up variable names
names(moveData) <- gsub("-mean()-X","_X_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-mean()-Y","_Y_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-mean()-Z","_Z_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-std()-X","_X_sd",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-std()-Y","_Y_sd",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-std()-Z","_Z_sd",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-meanFreq()-X","_X_freq_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-meanFreq()-Y","_Y_freq_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-meanFreq()-Z","_Z_freq_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-meanFreq()","_freq_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-mean()","_mean",names(moveData),fixed=TRUE)
names(moveData) <- gsub("-std()","_sd",names(moveData),fixed=TRUE)
### 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject
# First, sort by subject and activity
moveData <- moveData[order(moveData$Subject,moveData$Activity),]
# Now, make a data table for quicker calculations
dt_move <- data.table(moveData)
summary <- ddply(moveData,.(Subject,Activity),numcolwise(mean))
library(plyr)
summary <- ddply(moveData,.(Subject,Activity),numcolwise(mean))
?write.table
write.table(summary,"tidyData.txt")
write.table(summary,"tidyData.txt",row.names=FALSE)
dim(summary)
